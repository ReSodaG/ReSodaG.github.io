<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何使用 Git - 01</title>
    <link href="/2022/09/19/how-to-use-git-01/"/>
    <url>/2022/09/19/how-to-use-git-01/</url>
    
    <content type="html"><![CDATA[<p>关于如何使用 Git 我专门在一个<a href="https://github.com/Storh/git-example">测试项目</a>中进行了尝试，并保持了提交记录提交在 GitHub 上，这个项目的内容就是用来描述 Git 的命令和操作。为了方便测试分支和协作，我一共准备了 3 个用户来对项目进行修改，分别是我本人、 Alice 和 Bob。</p><h2 id="修改提交内容">修改提交内容</h2><p>在提交（commit）内容中，commit 信息填写的有一些问题提交的代码内容也有一些需要更改（新增或编辑）的，这时候，就可以<a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C">重新提交内容</a>。</p><p>如上面的示例，首先需要先暂存缺少的内容，然后再执行 <code>git commit --amend</code>。这将会在终端中打开一个文件，<code>i</code> 可以对你的提交信息进行修改，<code>Esc : wq</code> 进行保存完成这次对提交内容的修改。</p><p>需要注意的是，这个修改只能在还未推送到远程分支的情况下进行，这一行为也会改变提交的哈希。</p><p>利用这个操作，可以有效的减少提交记录里那些小修小补的内容，使提交记录更加清晰明了。</p><p>在<a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a> 小游戏的高级篇的第四关“撤销变更”可以尝试如何撤销提交，这里就不赘述，分别是下面两个命令：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">reset</span> HEAD~<span class="hljs-number">1</span><br>git <span class="hljs-built_in">revert</span> HEAD<br></code></pre></td></tr></table></figure><p>分别是撤销本地的一次提交和撤销远程的一次提交。</p><h2 id="标签">标签</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">轻量标签</span><br>git tag v0.0.2-d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">附注标签</span><br>git tag -a v0.0.1 -m &quot;tag 测试&quot;<br></code></pre></td></tr></table></figure><hr><p>其他命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">后期添加 tag，在最后加上提交的校验和</span><br>git tag -a &lt;tag name&gt; &lt;hash&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">上传某个 tag</span><br>git push origin &lt;tagname&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">上传所有 tag</span><br>git push origin --tags<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除 tag</span><br>git tag -d &lt;tagname&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程 tag</span><br>git push origin --delete &lt;tagname&gt;<br></code></pre></td></tr></table></figure><blockquote><p>Git 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。<br>轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。<br>而附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 GNU Privacy Guard （GPG）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。<br>—— <a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE">Pro Git 2.6 章</a></p></blockquote><p>检出（checkout，查看，移动到某个分支、提交或标签上）到某个标签上后，提交的内容不会有改变，需要检出到具体的哈希，或者直接从这个 tag 建立一个新的分支才行。但是 tag 并不会跟随你的提交进行改变，会导致标签和分支不同步或者割裂的情况。</p><p>tag 的使用可以让项目更加好区分一个个具体的版本，个人认为，tag 是用来区分每次发布的一个标记，用来方便后续对某个版本的代码的确定。无论是要重新打包或者修复 bug 都能提供一个清晰的依据。</p><h2 id="新建分支">新建分支</h2><p>新建分支参考 Pro Git 的<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6">这一章节</a>绝大多少情况下，我们都是从“当前”分支新建，只需要执行下面的命令就可以。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> 新分支名<br></code></pre></td></tr></table></figure><p>将会自动新建和移动到对应的分支上。这一操作可以在 <a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a> 小游戏基础篇的第二个关卡学习和实验。</p><p>建立分支可以让开发的代码和过程和主分支隔离开，在分支上进行操作，直到适当的时候将修改内容合并上去，这样可以减少你修改的内容对其他开发者的影响。</p><p>根据先前的故事来说，如果我和其他同事们，不同模块的代码开发在不同的分支上，那么他在使用从本地复制出来的项目代码进行（非常不推荐）提交和推送的时候，只要没有进行过分支合并，那么就不会影响其他人的代码从而导致冲突。</p><h2 id="合并分支">合并分支</h2><h3 id="快进">快进</h3><p>只在一个分支上提交内容，每次在开发完功能后将分支上的操作合并到主分支上的情况，这种操作不会产生分支的合并记录，实际上只是移动了分支的指针，整体的提交日志依然是线性的，不会有分叉。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将较新的分支内容合并到较旧的分支上</span><br>git checkout main<br>git merge draft<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除分支（对于不需要的分支，可以根据实际情况来进行删除）</span><br>git branch -d draft<br></code></pre></td></tr></table></figure><p>如果是单纯的把后续的提交添加到之前的分支上，也就是在一条线性的没有分叉的提交线上移动分支，这时候只要检出到想要移动的分支上，然后使用 <code>git merge</code> 命令将当前分支的指针移动过去就可以，这种分支合并只会改变这个分支的提交列表，并不会有合并提交产生。</p><h3 id="没有冲突的三方合并">没有冲突的三方合并</h3><p>这种一般是单人开发中经常遇到的情况，基于某一个结点（提交快照）建立了两个分支，在两个分支都开发和操作结束后，要将两个分支的内容都合并到主分支上的操作。这种情况下，合并的三方分别是两个分叉的终点和两个分叉的最近的共同祖先结点。</p><p>同时要注意的是，如果从原有的分支上分离出来了新的分支，并且原先的分支依旧在前进，这种情况也是属于三方合并的。此时的分支状态就相当于已经进行了一次快进，将主分支的指针向前移动到了某个分支的终点。但是不鼓励这种做法，如果原本分支的修改很容易产生可以影响到其他分支的冲突。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">先移动到主分支上</span><br>git checkout test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">快速前进到第一个分支上</span><br>git merge test-1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">和第二个分支触发三方合并</span><br>git merge test-2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">合并结束后删除已经合并的分支</span><br>git branch -d test-1<br>git branch -d test-2<br></code></pre></td></tr></table></figure><p>分支合并后的结果如下图：</p><img src="/2022/09/19/how-to-use-git-01/merge-branch-without-conflict.jpg" class="" title="没有冲突的分支合并"><p><img src="how-to-use-git-01/merge-branch-without-conflict.jpg" alt="没有冲突的分支合并"></p><p>可以看出来，这样操作产生了分支合并的 Git 记录。等于说在 Git 的操作下，产生了一个新的快照，test-1 和 test-2 的最后一次提交是这个快照的两个父级，而 test 这个分支指针指向了这个自动产生的提交上。</p><p>以上操作可以查看本项目 test/1 文件夹中的内容。</p><h3 id="有冲突的三方合并">有冲突的三方合并</h3><p>而对于有冲突的分支合并，分别在 test/2 和 test/3 这两个文件夹中进行了测试。主要是针对两个分支只有一次提交产生的冲突和有多次提交产生的冲突在最后合并分支后的显示。这里执行的命令和上面相同，虽然 Git 可以使用命令的方式去处理冲突的文件，但是还是直接使用 ide 提供的文件编辑来的更方便也更符合大多数使用场景。</p><p>在有冲突的分支合并中，有以下内容需要多加注意：</p><p>可以看到，git 在遇到冲突的时候，会把不能进行合并的两个提交块进行对比显示，针对修改的代码内容，将会将两块内容都进行对比，即便是两个不同的提交并没有修改同一行代码，或者修改的内容前后添加了空行去分割。而对于新增的内容，如果新增的内容是相同的，就不会显示为冲突。</p><p>同时我们观察合并分支这个行为，在 git log 中的显示可以看出，他本质上也是一次 commit 只不过带上了一个 Merge 属性，写着合并的是那两个提交的哈希。正因为合并分支也是新增一个提交，所以在一些查看 Git 记录的插件中也能看到这次提交的内容。在这个提交中，只会显示当前被合并进来的分支中的独有的内容。如果是两个分支将同一个文件修改为同样的状态，或者添加了同样的文件，那么这些已经被提交的文件并不会显示在这次的合并提交中。</p><p>有冲突的文件将会标记好对应提交的哈希放在文件中，需要自己去进行处理后暂存。而已经暂存好的文件并不需要去改动，因为这是 Git 自己处理发现的被合并进主分支的分支所修改的内容，你修改好的发生冲突的文件将会覆盖原先提交中的那个文件。你点开查看提交内容的时候，显示的内容是不同（文件的变更前后的提交哈希不同），而另一个没有冲突的文件点开后显示的内容是相同的（文件被加入的哈希是相同的）。</p><img src="/2022/09/19/how-to-use-git-01/commit-merge.jpg" class="" title="test-2 分支合并到 test 分支上时显示的提交的文件"><p><img src="how-to-use-git-01/commit-merge.jpg" alt="test-2 分支合并到 test 分支上时显示的提交的文件"></p><p>从上图可以看从，相同的文件 file 和 file copy 没有被加入到这次提交当中，而没有冲突的 file2 文件的来源哈希是在 test-2 最后编辑这个文件的哈希（以上描述请参考 <a href="https://github.com/Storh/git-example/tree/main/test/3">test/3</a> 这次试验和<a href="https://github.com/Storh/git-example/tree/main/test/3/info.md">结论</a>理解）。</p><h3 id="分支前后关系如何显示">分支前后关系如何显示</h3><p>在 vsc 上显示的提交顺序是优先按照祖先关系排序，然后根据提交的时间。</p><p>如：按照时间顺序，先是对 test-1 分支进行了提交，然后和 test-2 分支交替提交一些内容，在快结束的时候，突然意识到应该提供一个双方修改相同的文件，或者是在提交 1 处存在 bug 需要修复，于是在 test 分支上新增了文件后，利用 Git rebase 来将这次的提交作为两个分支的共同祖先结点，这样两个分支就仿佛从一开始就有了这个同样的文件。然后先快进到 test-1 分支，在合并 test-2 分支。但是最后显示的效果将会是这样：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">     2<span class="hljs-string">-3</span>--<span class="hljs-string">-5</span>--<br>    /         \<br><span class="hljs-string">-1</span><span class="hljs-string">-7</span>           merge<br>    \         /<br>     ---<span class="hljs-string">-4</span>--<span class="hljs-string">-6</span><br></code></pre></td></tr></table></figure><p>其中，test 分支一开始指向的是提交节点 1，test-1 分支的内容是 2、3、5 提交节点，4、6 为 test-2 提交结点，而提交 7 就是利用 rebase 来添加到主分支上的提交内容。</p><p>这样我们也得到了一个使用 rebase 的方式来修改根节点 bug 的技巧。</p><p>具体操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">先移动到主分支上</span><br>git checkout test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进行修改和提交你要改动的内容，生成提交 7</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">移动到 test-1 分支上，进行变基操作</span><br>git checkout test-1<br>git rebase test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">test-2 进行同样的操作</span><br>git checkout test-2<br>git rebase test<br><br></code></pre></td></tr></table></figure><p>实际测试结果如下图：</p><img src="/2022/09/19/how-to-use-git-01/branch-test.jpg" class="" title="分支 test 在合并分支后显示的提交记录"><p><img src="how-to-use-git-01/branch-test.jpg" alt="分支 test 在合并分支后显示的提交记录"></p><p>以上修改的具体 Git 命令和操作截图以及文件，可以查看 <a href="https://github.com/Storh/git-example/tree/main/test/1">test/1</a>、<a href="https://github.com/Storh/git-example/tree/main/test/2">test/2</a> 和 <a href="https://github.com/Storh/git-example/tree/main/test/3">test/3</a> 这三个文件夹中的内容和信息。</p><h2 id="关于-Git-的感悟">关于 Git 的感悟</h2><p>版本控制通过记录历史差异的方式，方便我们去查看文件的历史变化和保存不同的副本，这也将方便我们进行协作。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 0004 题解</title>
    <link href="/2022/09/17/LeetCode-0004/"/>
    <url>/2022/09/17/LeetCode-0004/</url>
    
    <content type="html"><![CDATA[<h2 id="从-How-Hard-Can-It-Be-到真的-Hard">从 How Hard Can It Be 到真的 Hard</h2><p>首先，第四题 <a href="https://leetcode.com/problems/median-of-two-sorted-arrays/">Median of Two Sorted Arrays</a> 是 LeetCode 的第一道 Hard 难度的题目，求两个有序数组的中位数。</p><p>首先题目看到这里，相信大家的反应是 How Hard Can It Be，只要从最小的数字开始，数到中间就完事了，毕竟数组是有序的。但是真正的难点是下一个要求，时间复杂度为 O(log (m+n))。当加上这个限制条件的时候，相信很多刚开始刷题的朋友们都会感觉非常的突兀和不习惯，而想解决这个题目也就默认给了你一些前置条件，就是你至少要知道二分查找。</p><h2 id="二分查找">二分查找</h2><p>为什么二分查找的时间复杂度是 O(logn)？假设一个有序的整数数组 A，数组 A 有 N 个元素，寻找数组 A 中有没有数字 j。对这个数组运用二分查找，同时假设数组 A 中没有数字 j。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css">// 数组 <span class="hljs-selector-tag">A</span> 中的内容<br><span class="hljs-selector-attr">[a, b, c, d, e, f, g, h, i, k, l, m, n, o, p, q]</span><br><br>// 进行第一次二分，因为元素 h 小于 j，元素 j 可能在从 元素 <span class="hljs-selector-tag">i</span> 到 r 的区间中<br><span class="hljs-selector-attr">[a, b, c, d, e, f, g, h]</span> <span class="hljs-selector-attr">[i, k, l, m, n, o, p, q, r]</span><br><br>// 对从 <span class="hljs-selector-tag">i</span> 开始 到 r 结束的这段数组再次进行二分查找，j 可能在 <span class="hljs-selector-tag">i</span> 到 n这个区间中<br><span class="hljs-selector-attr">[a, b, c, d, e, f, g, h]</span> <span class="hljs-selector-attr">[i, k, l, n]</span> <span class="hljs-selector-attr">[m, o, p, q]</span><br><br>// 对区间进行二分查找，元素 j 可能在区间 <span class="hljs-selector-tag">i</span> 到 k 之间<br><span class="hljs-selector-attr">[a, b, c, d, e, f, g, h]</span> <span class="hljs-selector-attr">[i, k]</span> <span class="hljs-selector-attr">[l, n]</span> <span class="hljs-selector-attr">[m, o, p, q]</span><br><br>// 对 <span class="hljs-selector-tag">i</span> 到 k 的区间进行二分<br><span class="hljs-selector-attr">[a, b, c, d, e, f, g, h]</span> <span class="hljs-selector-attr">[i]</span> <span class="hljs-selector-attr">[k]</span> <span class="hljs-selector-attr">[l, n]</span> <span class="hljs-selector-attr">[m, o, p, q]</span><br><br>// 此时发现二分后两个区间中都只有一个元素，且都不为数字 j，得出结论，数组 <span class="hljs-selector-tag">A</span> 中不存在数字 j<br><br></code></pre></td></tr></table></figure><p>通过上面演示的二分查找的过程可以看出来，二分就是通过不断的将要查找的值可能存在的区间对半切开，直到只剩一个元素或者找到要查找的数字为止。我们假设每次进行查找最多进行 X 次二分比较行为，二分的过程回退到原始数组，可以发现从一个元素开始，通过若干次乘以二，数组的长度将会符合原始数组的长度。而这个乘以二的次数正好等于数组进行二分的次数 X。得到以下的式子：</p><p>N = 2<sup>X</sup> =&gt; X = log<sub>2</sub>(N)</p><p>这就是为什么二分查找的时间复杂度是 O(logn) 的一个简单推导。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">binarySearch</span> = (<span class="hljs-params">nums, i</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> m = nums.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = m - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-keyword">let</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((left + right) / <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span> (nums[mid] &lt; i) left = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> right = mid;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (nums[left] == i)<br>        <span class="hljs-keyword">return</span> left + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>上面是一个二分的例子，要注意的地方是，二分的结束条件和如何决定下一次二分的区间。这里可以看到，循环的结束条件是首位相遇，也就是区间中只有一个元素的情况，因为二分的特性，最后区间中的元素一定是逐步减少的，同时这个区间也是一直符合我们设置的判定条件，此时区间中唯一的元素就是我们要找的元素了。也可以在每次二分时判断中间选择的点是不是符合要查找的条件，这样当运气好的时候，可以一次就把元素挑选出来。</p><h2 id="题目分析">题目分析</h2><p>既然是求两个数组的中位数，那么两个数组之间一定是有关联的，而从中位数所在的位置，一定是可以把两个数组所有的元素分为两块，分别是小于中位数的和大于中位数的，且两边的数量应该是刚好相等或左侧数字比右侧多一个。此时的中位数应该就是左侧最大数字和右侧最小数字的平均数或左侧最大的数字。</p><p>当了解到中位数可以通过分割两个数组实现的话，我们就可以把问题提炼成，两个有序数组 A 和 B，将两个数组分割为左右元素个数相同或者左边多一个的情况，两侧元素满足左侧所有的元素小于右侧所有的元素的情况。因为元素的总数是确定的，我们只要确定数组 A 中的位置，就能推出数组 B 中元素的位置，所以这个问题又可以变成，在数组 A 中寻找一个元素，使得这个元素满足以下条件：通过该元素可以确定一个数组 B 中的元素，把两个数组分成左右两部分，这两部分中，左边的最大值小于右边的最小值。</p><p>为什么二分查找可以用来解决这个问题呢？主要原因还是，二分是在一个有序的列表中查找符合某一个条件的元素，那么不论是和某个值相等，还是像这个题目一样，要求左边元素全都小于右边的元素，都是可以实现的。当然，在实际解体中，还要注意数值的取值范围，防止出现因为各种边界条件导致的错误。</p><h2 id="题解">题解</h2><h3 id="采用二分解法">采用二分解法</h3><p>主要是利用二分查找的方式在较短的数组中寻找符合要求的分割位置，当满足要求时，返回中位数；不满足的时候，根据左侧应该小于右侧的原则，去确定答案在那个区间中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> findMedianSortedArrays = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums1, nums2</span>) &#123;<br><br>    <span class="hljs-comment">// 对元素最少的数组进行二分，减少计算</span><br>    <span class="hljs-keyword">if</span> (nums1.<span class="hljs-property">length</span> &gt; nums2.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">findMedianSortedArrays</span>(nums2, nums1);<br><br>    <span class="hljs-keyword">const</span> m = nums1.<span class="hljs-property">length</span>, n = nums2.<span class="hljs-property">length</span>;<br>    <span class="hljs-comment">// left 和 right 是要二分的数组的范围，第一个数组可以分割成 m + 1 种可能的情况。</span><br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = m;<br>    <span class="hljs-comment">// midL 是左侧最大的数，midR是右侧最小的数</span><br>    <span class="hljs-keyword">let</span> midL = <span class="hljs-number">0</span>, midR = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// left 和 right 相等是为了处理某一个数组为空的特殊情况</span><br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-comment">// i 指向的是二分后数组开始的元素，</span><br>        <span class="hljs-keyword">let</span> i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((right + left) / <span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// 推导和化简如何计算另一个数组要选择的分割点，根据左侧元素和右侧相等或多一个的原则</span><br>        <span class="hljs-comment">// let j = n - (Math.floor((m + n) / 2) - (m - i));</span><br>        <span class="hljs-comment">// 2 + 3 - Math.floor((2 + 3) / 2) === 3 === Math.floor((2 + 3 + 1) / 2) === Math.cell((2 + 3) / 2)</span><br>        <span class="hljs-keyword">let</span> j = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>((n + m) / <span class="hljs-number">2</span>) - i;<br>        <span class="hljs-comment">// il 和 ir 是第一个数组的二分的数值，由于数组是有序的，那么 il 就是第一个数组左边最大的数，ir 就是右边最小的数。jl 和 jr 同理。</span><br>        <span class="hljs-comment">// Infinity 和 -Infinity 分别是 JavaScript 里面的最大数和最小数，用来适配当二分位置旁边元素为空的时候的处理方法。</span><br>        <span class="hljs-keyword">const</span> il = i === <span class="hljs-number">0</span> ? -<span class="hljs-title class_">Infinity</span> : nums1[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">const</span> ir = i === m ? <span class="hljs-title class_">Infinity</span> : nums1[i];<br>        <span class="hljs-keyword">const</span> jl = j === <span class="hljs-number">0</span> ? -<span class="hljs-title class_">Infinity</span> : nums2[j - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">const</span> jr = j === n ? <span class="hljs-title class_">Infinity</span> : nums2[j];<br>        midL = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(il, jl);<br>        midR = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(ir, jr);<br>        <span class="hljs-comment">// 根据二分查找，可以得到下面的解法</span><br>        <span class="hljs-keyword">if</span> (midL &lt;= midR) &#123;<br>            <span class="hljs-keyword">return</span> (m + n) % <span class="hljs-number">2</span> ? midL : (midL + midR) / <span class="hljs-number">2</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// jl 应该小于 ir，此时证明了 ir 过小，所以要找到数在右侧区间</span><br>            <span class="hljs-keyword">if</span> (jl &gt; ir) &#123;<br>                left = i + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                right = i - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="LeetCode-中文官方题解">LeetCode 中文官方题解</h3><p>上面的解法比较容易理解，就是非常明显的二分查找的方式，但是官方的题解，就有一点难度了。</p><p>首先需要分析正确分割数组后的情况，当 i、j 作为两个数组的分界点在正确的位置的时候，分割点两边的数一定符合特定的状态：il &lt;= ir; il &lt;= jr; jl &lt;= jr; jl &lt;= ir。而且根据两个数组递增的特性，只有在正确分割数组时，才能符合上面的状态。也就是说，符合题解的 i 一定是符合条件 il &lt;= ir 的最大值，j 一定是符合条件 jl &lt;= ir 的最大值。</p><p>详细解释：假设此时的 i 和 j 都是符合最终条件的值，那么当 i = i + 1 时，需要满足条件 ++il &lt;= --jr 才能成立,因为 ++il = ir 和 --jr = jl 条件可以转换成 ir &lt;= jl，这显然与分割点左边全部小于等于右边的条件相悖。所以一定没有比符合条件的 i 值更大的。对于条件 jl &lt;= ir 中的 j 是最小值，同理可以转换成 jr &lt;= il 也是相悖的。</p><p>理清上面的思路后，就可以进行解题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">var</span> findMedianSortedArrays = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums1, nums2</span>) &#123;<br>    <span class="hljs-keyword">if</span> (nums1.<span class="hljs-property">length</span> &gt; nums2.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">findMedianSortedArrays</span>(nums2, nums1);<br><br>    <span class="hljs-keyword">const</span> m = nums1.<span class="hljs-property">length</span>, n = nums2.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = m;<br>    <span class="hljs-keyword">let</span> midL = <span class="hljs-number">0</span>, midR = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br><br>        <span class="hljs-keyword">let</span> i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((right + left) / <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">let</span> j = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>((n + m) / <span class="hljs-number">2</span>) - i;<br>        <span class="hljs-keyword">const</span> il = i === <span class="hljs-number">0</span> ? -<span class="hljs-title class_">Infinity</span> : nums1[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">const</span> ir = i === m ? <span class="hljs-title class_">Infinity</span> : nums1[i];<br>        <span class="hljs-keyword">const</span> jl = j === <span class="hljs-number">0</span> ? -<span class="hljs-title class_">Infinity</span> : nums2[j - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">const</span> jr = j === n ? <span class="hljs-title class_">Infinity</span> : nums2[j];<br><br>        <span class="hljs-comment">// 此时的二分查找条件变成了寻找最大的满足 il &lt;= jr 条件的 i 的值，并且由于为了防止进入死循环，对 left 进行了强制右移</span><br>        <span class="hljs-comment">// 所以需要将每个满足条件的两端的最值进行记录，这样即便由于 i 刚好在在过程中变成中值导致的无解的情况进行了规避</span><br>        <span class="hljs-keyword">if</span> (il &lt;= jr) &#123;<br>            midL = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(il, jl);<br>            midR = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(ir, jr);<br>            left = i + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            right = i - <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// jl &lt;= ir 作为条件的题解</span><br><br>        <span class="hljs-comment">// if (jl &lt;= ir) &#123;</span><br>        <span class="hljs-comment">//     midL = Math.max(il, jl);</span><br>        <span class="hljs-comment">//     midR = Math.min(ir, jr);</span><br>        <span class="hljs-comment">//     right = i - 1;</span><br>        <span class="hljs-comment">// &#125; else &#123;</span><br>        <span class="hljs-comment">//     left = i + 1;</span><br>        <span class="hljs-comment">// &#125;</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (m + n) % <span class="hljs-number">2</span> ? midL : (midL + midR) / <span class="hljs-number">2</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="改进过的二分解法">改进过的二分解法</h3><p>不过上面的解题方式和逻辑多少有些绕弯，其实我们只要运用二分查找每次都一定可以排除一半的不符合要求的数组元素就可以了。当发生条件 jl &gt; ir 时，一定证明了此时 i 选的过小，那么正确的 i 一定在区间 [i + 1, right] 之间，对 left 进行修改就可以了。</p><p>同理，当 il &gt; jr 发生时，一定是 i 选的过大了，此时就在区间 [left, i - 1] 之中，但是要注意的是，由于对中位数 i 的区间变化变成了 - 1 的情况，为了防止死循环和 i 出现负值的情况，此时计算中位数时应该使用 left + right + 1 的方式计算，或者直接使用 <code>Math.ceil()</code> 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">var</span> findMedianSortedArrays = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums1, nums2</span>) &#123;<br>    <span class="hljs-keyword">if</span> (nums1.<span class="hljs-property">length</span> &gt; nums2.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">findMedianSortedArrays</span>(nums2, nums1);<br><br>    <span class="hljs-keyword">const</span> m = nums1.<span class="hljs-property">length</span>, n = nums2.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = m;<br>    <span class="hljs-keyword">let</span> midL = <span class="hljs-number">0</span>, midR = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-keyword">let</span> i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((right + left) / <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">let</span> j = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>((n + m) / <span class="hljs-number">2</span>) - i;<br><br>        <span class="hljs-keyword">const</span> il = i === <span class="hljs-number">0</span> ? -<span class="hljs-title class_">Infinity</span> : nums1[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">const</span> ir = i === m ? <span class="hljs-title class_">Infinity</span> : nums1[i];<br>        <span class="hljs-keyword">const</span> jl = j === <span class="hljs-number">0</span> ? -<span class="hljs-title class_">Infinity</span> : nums2[j - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">const</span> jr = j === n ? <span class="hljs-title class_">Infinity</span> : nums2[j];<br><br>        <span class="hljs-keyword">if</span> (jl &gt; ir) &#123;<br>            left = i + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            right = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> i = left;<br>    <span class="hljs-keyword">let</span> j = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>((n + m) / <span class="hljs-number">2</span>) - i;<br><br>    <span class="hljs-keyword">const</span> il = i === <span class="hljs-number">0</span> ? -<span class="hljs-title class_">Infinity</span> : nums1[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">const</span> ir = i === m ? <span class="hljs-title class_">Infinity</span> : nums1[i];<br>    <span class="hljs-keyword">const</span> jl = j === <span class="hljs-number">0</span> ? -<span class="hljs-title class_">Infinity</span> : nums2[j - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">const</span> jr = j === n ? <span class="hljs-title class_">Infinity</span> : nums2[j];<br>    midL = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(il, jl);<br>    midR = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(ir, jr);<br><br>    <span class="hljs-keyword">return</span> (m + n) % <span class="hljs-number">2</span> ? midL : (midL + midR) / <span class="hljs-number">2</span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="感悟">感悟</h2><p>在这个题目中，最大的感受是二分的用法扩展。二分不只是单纯的在一个数组中查找某个数或者字符串，而是通过尝试深刻的理解到了，只要有有序数组和分割条件，就能进行二分查找。</p><h2 id="参考连接">参考连接</h2><ul><li><p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/">4. Median of Two Sorted Arrays</a></p></li><li><p><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/solution/xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-s-114/">寻找两个有序数组的中位数</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 异步 03 - 增补</title>
    <link href="/2022/09/13/js-async-03/"/>
    <url>/2022/09/13/js-async-03/</url>
    
    <content type="html"><![CDATA[<h2 id="好生生的为什么看起来了标准">好生生的为什么看起来了标准</h2><p>正如我在上篇文章里提到的，具体的实现是根据标准来的，我打算在这篇文章里面分享一些之前两篇文章中涉及到的标准，和我的一些理解，并给出一些我看过的相关的博客和参考资料。</p><h2 id="都有哪些标准">都有哪些标准</h2><h3 id="HTML">HTML</h3><p>我们平常提到的 JavaScript，或者说在前端开发里面用到的 JavaScript，它到底由那些标准定义呢？主要是两个方面来限制的，一个是我们常说的 ES5、ES6 的 ECMA-262 标准，另一个就是 HTML 标准。在第一篇文章中的时候，我们提到了运行时这个概念，那是因为，在 ES5 标准的全文中，根本没有出现异步（async）这个词，此时兼容 ES5 标准的 JavaScript 中的异步功能必然是根据其他标准实现的。同样，在 setTimeout 这个功能归属于 Web API 的时候也可以看出这个功能的标准是遵循 HTML 标准中的要求，具体在<a href="https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html">第 8.6 章 Timers</a> 中。而之前文章里提到的 Event loops 事件循环，也正是在 HTML 标准的<a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loops">第 8.1.6 章</a>中给出了规范。</p><p>在 HTML 的事件循环包括这些内容。事件循环负责了事件、HTML 解析、回调、资源的获取和响应 DOM 操作，要求每个事件循环都要有微任务队列。同时，也对事件循环模型的如何处理进行了规范，像上一篇文章中提到的，微任务的执行在页面渲染之前，也是根据这里的规范进行规定的。标准要求对微任务的检测要优先于更新渲染的行为，而标准对<a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint">执行微任务检查点</a>的要求中，就提到了当微任务队列不为空的时候，去逐个出队执行微任务队列。</p><h3 id="ECMAScript">ECMAScript</h3><p>在 ECMA-262 中，第一次出现异步这个词，是在 <a href="https://262.ecma-international.org/6.0/">ES6</a> 中描述 Promise 对象的时候。同时，在 ES6 标准的第 8.4 章 <a href="https://262.ecma-international.org/6.0/#sec-jobs-and-job-queues">Jobs and Job Queues</a> 中，提到了一个先进先出的 Job Queue，并且要求了在每个 ECMAScript 的实现中，都要有 ScriptJobs 和 PromiseJobs 两个 Job Queue。而这里定义的 Job 的执行要求，就是在事件循环模型里经常可以看到的执行栈为空的情况。可以说，正是因为 ES6 引入了 Promise 对象，在 ECMA-262 中才明确有了异步，同时也给出了一个 Job 和 Job Queue 的标准来让开发者可以做出符合标准的引擎去对异步或者延迟事件进行调度。</p><h3 id="Promises-A">Promises/A+</h3><p>Promises/A+ 是 Promise 的一个最小规范，按照 Promises/A+ 自己的描述，ECMA-262 对于 Promise 对象的添加和规范，主要是来自于 Promises/A+ 社区的努力。也就是说 Promise 对象在 JavaScript 中的实现，就是一个符合 Promises/A+ 标准的具体实现 <sup>[1]</sup>。</p><h2 id="HTML-还是-ECMAScript">HTML 还是 ECMAScript</h2><h3 id="ES5-时期">ES5 时期</h3><p>因为浏览器除了要有 JavaScript 的引擎外，还有对 DOM 的渲染等内容，所以浏览器作为 HTML 规范中的用户代理的一员 <sup>[2]</sup>，HTML 规范对浏览器如何实现 ECMA-262 的影响是必然的。和 ECMA-626 不一样，HTML 只保存和发表当前的单一规范版本 <sup>[3]</sup>，现在的 HTML 标准并不会像之前的 HTML 标准一样有版本号，而将会是一个不断改进的标准，并且覆盖并淘汰了过去所有的 HTML 版本。而我们日常所说的 HTML5 实际上应该指代的并不是某一个固定的 HTML 版本，而是指代现代 Web 技术 <sup>[4]</sup>。所以要确定当年的 HTML 标准内容，还是需要去查看当时的版本。</p><p>在 2017 年的 HTML 标准中的第 8.1.3.7 章 <a href="https://web.archive.org/web/20170228232624/https://html.spec.whatwg.org/multipage/webappapis.html#integration-with-the-javascript-job-queue">Integration with the JavaScript job queue</a> 中，提到了因为 ECMA-262 中的具体设计并不完善，所以要求用户代理（例如浏览器）遵从他设计的规范去实现 JavaScript 中的 promise job 的操作，从而保证可以把这些设计整合到事件循环中。</p><h3 id="ES13">ES13</h3><p>在现在的 ES13 中，Job 操作和之前的 ES5 中并不一样，同时也在相当多的规范内容中提到了 HTML 规范来举例。具体的规范内容可以在 ECMA-262 的第 9.5 章 <a href="https://262.ecma-international.org/13.0/#sec-jobs">Jobs and Host Operations to Enqueue Jobs</a> 中查看。而在 HTML 规范中，响应的章节内容在 8.1.5.4 中的 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#integration-with-javascript-jobs">Job-related host hooks</a> 一节中，具体写了 JavaScript 规范中定义的关于 Jobs 的内容，在用户代理（例如浏览器）中是如何定义的。</p><h2 id="博客分享">博客分享</h2><p>我在研究这个的过程中，看到了一些写的不错的博客，也分享一下。</p><ul><li><a href="https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf">How JavaScript works: an overview of the engine, the runtime, and the call stack</a></li></ul><ul><li><p><a href="https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e">How JavaScript works: inside the V8 engine + 5 tips on how to write optimized code</a></p></li><li><p><a href="https://blog.sessionstack.com/how-javascript-works-the-building-blocks-of-web-workers-5-cases-when-you-should-use-them-a547c0757f6a">https://blog.sessionstack.com/how-javascript-works-the-building-blocks-of-web-workers-5-cases-when-you-should-use-them-a547c0757f6a</a></p></li><li><p><a href="https://medium.com/@ramsunvtech/promises-of-promise-part-1-53f769245a53">JS Promise (Part 1 - Basics)</a></p></li><li><p><a href="https://medium.com/@ramsunvtech/js-promise-part-2-q-js-when-js-and-rsvp-js-af596232525c">JS Promise (Part 2 - Q.js, When.js and RSVP.js)</a></p></li><li><p><a href="https://github.com/jin5354/404forest/issues/61">深入探究 eventloop 与浏览器渲染的时序问题</a></p></li><li><p><a href="http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D">Loupe</a></p></li></ul><h2 id="参考连接-2">参考连接</h2><ol><li><p><a href="https://promisesaplus.com/implementations#the-ecmascript-specification">The ECMAScript Specification</a></p></li><li><p><a href="https://html.spec.whatwg.org/multipage/introduction.html#abstract:~:text=HTML%20user%20agents%20(e.g.%2C%20web%20browsers)">HTML user agents (e.g., web browsers)</a></p></li><li><p><a href="https://www.w3.org/html/">W3C HTML</a></p></li><li><p><a href="https://html.spec.whatwg.org/multipage/introduction.html#is-this-html5?">Is this HTML5?</a></p></li><li><p><a href="https://www.zhihu.com/question/40063533">ECMAScript 的 Job Queues 和 Event loop 有什么关系？</a></p></li><li><p><a href="https://html.spec.whatwg.org/multipage/">HTML Living Standard</a></p></li><li><p><a href="https://262.ecma-international.org/6.0/">ECMAScript® 2015 Language Specification</a></p></li><li><p><a href="https://262.ecma-international.org/13.0/#sec-jobs">ECMAScript® 2022 Language Specification</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 异步 02 - 微任务和 Web Workers</title>
    <link href="/2022/09/01/js-async-02/"/>
    <url>/2022/09/01/js-async-02/</url>
    
    <content type="html"><![CDATA[<h2 id="推荐阅读">推荐阅读</h2><ul><li><p><a href="https://juejin.cn/post/6844903512845860872">这一次，彻底弄懂 JavaScript 执行机制</a></p></li><li><p><a href="https://juejin.cn/post/6844903657264136200">微任务、宏任务与 Event-Loop</a></p></li></ul><p>这两篇文章关于事件循环和运行机制讲的是比较易懂的，我也从这两篇文章中获得了很多的启发，在看本文之前，可以先看看这两篇文章，或许可以解决你的很多疑问。</p><h2 id="引言">引言</h2><p>Promise 的出现，使得传统的事件循环机制出现了一些改变，在上一篇文章中，讲了并发模型和事件循环，但是没有涉及到 Promise 和 async/await 这两个分别在 ES6 和 ES8 中新添加的特性，这两个特性又给这个模型带来新的变化。这篇文章主要就基于这两个新添加特性对事件循环的影响来进行补充。</p><h2 id="宏任务和微任务">宏任务和微任务</h2><p>在上一篇的文章中，我们知道，JavaScript 会把定时器的回调函数作为消息放入消息队列中进行事件循环，那么针对 Promise，浏览器会对他的回调做怎样的处理呢？答案是对任务去进行精细的区分，分为宏任务（macro-task）和微任务（micro-task）两种，然后放在不同的队列中。宏任务依旧是之前事件模型中定时器的回调函数队列，但是微任务队列中存放的，就是 Promise 的回调函数队列了。</p><p>这时候，我们的事件模型有了变化，在每次循环中，除了之前的宏任务队列，还多了一个微任务队列，而 JavaScript 的代码执行顺序就会受到两个队列的调度先后的影响。 <strong>浏览器将会优先处理微任务队列，在微任务队列空的时候再去处理宏任务队列，这一变化带来的结果是，Promise 的回调将会在定时器的回调之前执行。如果一个微任务队列中的回调函数作用是返回一个新的微任务，将会微任务队列一直不为空，就会阻塞宏任务的执行。即便在这个过程中，微任务出队入队很多次任务，但是这依旧算作一次事件循环。</strong> 可以看下图来加深一下理解：</p><img src="/2022/09/01/js-async-02/event-loop-microtasks.png" class="" title="有微任务的模型结构"><blockquote><p><a href="https://zh.javascript.info/event-loop">图片来源</a></p></blockquote><p>如上图所示，在事件循环中，宏任务列表的第一个任务是执行网页 script 标签中的代码，然后执行的过程中产生了微任务，用户触发了移动鼠标的监听器，和入队了如图中 setTimeout 一样的宏任务。然后浏览器将会优先执行完微任务的所以任务，就像图中 microtasks 前的循环标记一样，直到微循环结束之后才去渲染网页，执行其中的元素修改，此时一个事件循环才处理完，接下来处理用户鼠标移动触发的宏任务……</p><h2 id="执行顺序">执行顺序</h2><p>为了证明这些执行顺序，我写了一个小 demo 大家可以尝试一下。这里是<a href="https://storh.github.io/event-loop-test/">链接</a>和<a href="https://github.com/Storh/event-loop-test">仓库</a>。</p><h3 id="证明微任务的执行是根据微任务的入队顺序">证明微任务的执行是根据微任务的入队顺序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>()<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Promise 0 1&quot;</span>))<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Promise 0 2&quot;</span>));<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>()<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Promise 1 1&quot;</span>))<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Promise 1 2&quot;</span>));<br><br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Promise</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">Promise</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">Promise</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">Promise</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>可以看到，这两个 Promise 的回调先后进入微任务队列，当第一个回调函数执行的时候，将链式调用的回调函数重新加入队列，根据队列的先进先出特性，接下来执行的就应该是第二个 Promise 的回调函数，而不是链式调用的回调。</p><h3 id="证明微任务总在宏任务前">证明微任务总在宏任务前</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setTimeout 0 start&quot;</span>);<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>()<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setTimeout 0 Promise 0&quot;</span>))<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setTimeout 0 Promise 1&quot;</span>));<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setTimeout 0 end&quot;</span>);<br>&#125;)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setTimeout 1 start&quot;</span>);<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>()<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setTimeout 1 Promise 0&quot;</span>))<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setTimeout 1 Promise 1&quot;</span>));<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setTimeout 1 end&quot;</span>);<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">setTimeout</span> <span class="hljs-number">0</span> start<br><span class="hljs-attribute">setTimeout</span> <span class="hljs-number">0</span> end<br><span class="hljs-attribute">setTimeout</span> <span class="hljs-number">0</span> Promise <span class="hljs-number">0</span><br><span class="hljs-attribute">setTimeout</span> <span class="hljs-number">0</span> Promise <span class="hljs-number">1</span><br><span class="hljs-attribute">setTimeout</span> <span class="hljs-number">1</span> start<br><span class="hljs-attribute">setTimeout</span> <span class="hljs-number">1</span> end<br><span class="hljs-attribute">setTimeout</span> <span class="hljs-number">1</span> Promise <span class="hljs-number">0</span><br><span class="hljs-attribute">setTimeout</span> <span class="hljs-number">1</span> Promise <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><h3 id="验证微任务队列的执行会阻塞渲染">验证微任务队列的执行会阻塞渲染</h3><p>这个验证的方法参考了<a href="https://stackoverflow.com/questions/62562845/any-example-proving-microtask-is-executed-before-rendering">这个问题的回答</a>，做了一些小改进。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">microtaskTimeout</span> = (<span class="hljs-params">rowSecond</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> startTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">const</span> second = <span class="hljs-title class_">Number</span>(rowSecond);<br>    <span class="hljs-keyword">if</span> (second) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-title function_">timeout</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - startTime &lt; second * <span class="hljs-number">1000</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>()<br>                    .<span class="hljs-title function_">then</span>(timeout);<br>            &#125;<br>        &#125;<br>        <span class="hljs-title function_">timeout</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">clickButton</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;clickButton start&quot;</span>)<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;intl&quot;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;点击后经过 5s 才修改&quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;line&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;red&quot;</span>;<br>    <span class="hljs-title function_">microtaskTimeout</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;clickButton end&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当进行点击之后就会看到，即便修改 dom 的代码在前，但是页面还是被微任务队列阻塞，直到微任务队列空才修改了 dom 元素（在单步调试的时候不会有这种效果，dom 元素的修改会是实时的）。</p><h2 id="微任务小结">微任务小结</h2><p>了解事件循环的机制后，就可以轻松理解 JavaScript 的代码执行顺序了，在使用异步操作的时候就会更加得心应手。我在 demo 地址的最后也给了一个例子来演示执行顺序。文末给到的参考链接中也有很多会给出同样的小示例。 <strong>但是要注意一个要注意的点，一切实现都是基于标准的。不能把目前的顺序或者某一个特定版本下的效果看作“金科玉律”，要去关注标准的变化，这点相信大家看完这个<a href="https://segmentfault.com/q/1010000016147496">问答</a>之后就会有相同的体会。</strong></p><h2 id="Web-Workers">Web Workers</h2><p>当你需要在前端页面上运行一个非常花时间的程序的时候，应该怎么办？通过前面的学习我们可以知道，用户的操作是以事件的形式在页面上调度的，而微任务和长时间运行的程序都会阻塞事件循环，使得我们的点击事件等行为长时间无法响应。有一种利用现有的工具，将一个操作拆分成多个计算任务，在每个计算任务结束后再把下一次计算利用 setTimeout 的形式加入宏任务队列中，使得页面得以响应，还能利用这种形式去进行进度条的显示，具体的例子可以参考这个<a href="https://zh.javascript.info/event-loop#yong-li-2-jin-du-zhi-shi">用例</a>。</p><p>这种解决办法增加了编码的复杂度，同时也不是所有的操作都方便更改成这样，所以在 Web API 中提供了这个功能——Web Workers。</p><p>Web Workers 可以让你在独立于页面主线程的后台线程中执行函数，来解决线程阻塞的问题。在我先前提到的<a href="https://storh.github.io/event-loop-test/">小 demo</a> 中我也有做同样的例子，可以用来进行尝试，可以看到在执行 Web Workers 的时候并不影响在页面的点击和内容修改，而结果也可以正常的获取。同时，在 Chrome 的开发者工具的性能选项中，也可以看到，Web Workers 在执行的时候并没有像后面的例子一样阻塞主线程。</p><img src="/2022/09/01/js-async-02/web-workers.png" class="" title="浏览器的性能选项"><p>而关于 Web Workers 的具体介绍和用法，可以参考 mdn web docs 中的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API">Web Workers API</a> 和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers">使用 Web Workers</a> 这两篇文档。同时，mdn 也提供了一个 <a href="https://github.com/mdn/dom-examples/tree/main/web-workers/simple-web-worker">demo</a> 可以供了解和学习。</p><h2 id="参考链接-2">参考链接</h2><ol><li><p><a href="https://zh.javascript.info/event-loop">事件循环：微任务和宏任务</a></p></li><li><p><a href="https://zh.javascript.info/microtask-queue">微任务（Microtask）</a></p></li><li><p><a href="https://stackoverflow.com/questions/62562845/any-example-proving-microtask-is-executed-before-rendering">Any example proving microtask is executed before rendering?</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API">Web Workers API</a></p></li><li><p><a href="https://github.com/mdn/dom-examples/tree/main/web-workers/simple-web-worker">simple-web-worker</a></p></li><li><p><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/">Tasks, microtasks, queues and schedules</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth">深入：微任务与 Javascript 运行时环境</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide">在 JavaScript 中通过 queueMicrotask() 使用微任务</a></p></li><li><p><a href="https://segmentfault.com/q/1010000016147496">async await 和 promise 微任务执行顺序问题</a></p></li><li><p><a href="https://segmentfault.com/a/1190000017970432">JavaScript 事件循环(Event Loop)</a></p></li><li><p><a href="https://segmentfault.com/a/1190000015112913">理解 javascript 中的事件循环(Event Loop)</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 异步 01 - 初识 JavaScript 异步</title>
    <link href="/2022/08/21/js-async-01/"/>
    <url>/2022/08/21/js-async-01/</url>
    
    <content type="html"><![CDATA[<h2 id="名词解释">名词解释</h2><ul><li><p>异步：异步指两个或两个以上的对象或事件不同时存在或发生</p></li><li><p>同步：各方都实时地收取信息的即时沟通方式，即为同步。</p></li><li><p>运行时：指运行时系统，即某门语言的宿主环境，在本文中一般指浏览器和 Node.js <sup>[1]</sup>。</p></li><li><p>阻塞：进程一直在等待某个事件的完成，期间无法执行其他操作。</p></li></ul><h2 id="关于-JavaScript-同步异步的第一印象">关于 JavaScript 同步异步的第一印象</h2><p>我们总是听说 JavaScript 是一个单线程 <sup>[2]</sup> 的语言，所以代码都是同步的，按照书写的顺序去执行；不用考虑异步开发时容易造成的死锁和冲突问题。但是又经常在一些文档中看到 JavaScript 的异步操作等相关的内容，需要保证异步操作的顺序和结果的正确。想来一些朋友可能会有困扰，这两者到底是一个什么样的关系。为了介绍的简单一些，这篇文档先暂时不提 Promise、async/await 和相应的影响。</p><p>为什么需要异步 JavaScript？同步操作虽然可以降低学习门槛，并且在 ES5 中也并没有提出对异步的要求，但是为什么各种 JavaScript 运行时（浏览器或者 Node.js）都提供了异步的能力？主要原因还是同步造成的缺陷：耗时较长的函数会导致整个页面的卡死。</p><p>因为同步代码是一行一行执行的，而当前端页面在处理数据或者等待网络请求的结果时，整个线程在进行等待，就会导致没办法去对页面进行操作无法对我们的点击事件等其他行为做出响应，这就是驱使大家给 JavaScript 添加异步能力的一个原因。</p><p>大家的解决方法，就是通过使用事件和回调函数来解决这个问题。浏览器提供了相应的异步 API 比如 XHR <sup>[3]</sup>（XMLHttpRequest 属于 Web API 的范畴，并不是 ECMA-262 中对语法的要求，所以是由运行时提供的），通过给 XHR 对象设置监听器和回调函数，函数调用这个 API 的时候，浏览器就根据提供的参数去进行网络请求。当请求成功的事件触发监听器后，就将回调函数添加到 JavaScript 引擎中去执行回调函数，实现异步操作的效果。<strong>通过让浏览器去额外执行那些比较花费时间的操作，保持页面的线程不被长期占用，然后设置事件监听和回调函数来实现获取异步函数的返回结果，这样主线程就可以保持是同步的，异步的操作由运行时在其他线程上执行。</strong></p><h2 id="并发模型与事件循环">并发模型与事件循环</h2><p>其实关于 JavaScript 的异步的原理和实现，有一个必读的文档，就是 mdn 撰写的关于并发模型与事件循环的文档 <sup>[4]</sup>，描述的就是 JavaScript 运行时是如何实现并发，只有可以同时并发的执行多个线程，同时这几个线程之间可以通信，那么才会实现异步效果，使得代码可以进行异步编程。</p><p>为了理解事件监听和回调函数是如何实现异步，和其中涉及到运行时的引擎的设计，首先需要解释一下何为事件监听和异步。简单的例子可以说，你点击页面按钮的时候，触发了按钮上设置的点击监听器，而这个监听器再去触发设置在上面的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">someValue, callback</span>) &#123;<br><span class="hljs-keyword">const</span> value = <span class="hljs-title function_">doSometing</span>(someValue);<br><span class="hljs-title function_">callback</span>(value);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">foo</span>(<span class="hljs-string">&quot;abcd&quot;</span>, <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如上，按照函数式编程的思想，函数是可以作为参数使用的。函数 foo 除了接受正常的进行计算用的参数以外，还接受了一个名为 callback 的参数，而这个参数是一个函数。这个 callback 就是回调函数。当在其他函数，比如 bar 函数中使用 foo 函数的时候，就可以将一个匿名函数作为参数传递给 foo。这样 foo 会在执行完计算操作后，将计算结果传递给回调函数。</p><p>当讲到这一步时就可以看出来，JavaScript 的异步实现依赖于运行时提供的 API 来实现。当你调用这些 API 的时候，浏览器会添加一个监听器，并去把你要执行的另一个操作的参数去放到另一个线程中执行，当执行结束后，就会触发监听器，而浏览器就会把回调函数添加到发起异步请求的页面的 JavaScript 引擎中。这一套操作，就依靠并发模型与事件循环来实现。</p><h3 id="并发模型与事件循环文档解读">并发模型与事件循环文档解读</h3><p>模型结构：</p><img src="/2022/08/21/js-async-01/the_javascript_runtime_environment_example.svg" class="" title="模型结构"><blockquote><p>图片来源：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop/the_javascript_runtime_environment_example.svg">https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop/the_javascript_runtime_environment_example.svg</a></p></blockquote><p>在这个模型中，执行栈（Stack）中存储的是当前函数调用，每个帧是一个函数的参数和变量等具体内容，执行完一个函数就会出栈一个函数。堆（Heap）中是 JavaScript 程序中的各种对象以及的数据，程序执行的时候，通过指针来堆中取得具体的数据。队列（Queue）是待处理的消息队列，每一个消息代表一个事件监听器完成后被添加到队列中，而运行时可以通过这个消息来找到当时绑定的回调函数。</p><p>当 JavaScript 引擎执行函数的时候，根据代码的执行顺序为函数创建帧并压入执行栈中，如果这个函数调用了其他函数，就为这个被调用的函数创建新的帧，然后压入执行栈中执行。每个函数执行完毕返回后，就弹出这个函数对应的帧，直到栈中的帧被执行完。</p><p>当执行栈中的函数执行完后，就进入事件循环期间，运行时就会逐个处理队列中的消息，根据回调函数，创建新的帧压入执行栈让 JavaScript 引擎去执行代码。等栈空后，事件循环机制会再处理队列中的下一个消息的回调函数。</p><p>队列中的每一个消息完整执行后，其他消息才执行，而当执行栈中的一个函数执行时，JavaScript 引擎不会被其他函数抢占，只有在执行栈中的帧都运行完毕之后才会去再次处理消息队列中的消息。这样的设计就在线程同步执行的基础上，实现了异步编程的效果，但是永远不会因为等待网络请求等其他操作而阻塞。</p><p>当然，这样的设计也不是没有缺点的，当一个回调函数需要较长的处理时间时，由于点击和滚动页面等行为也是利用事件实现的，这时候 Web 应用程序就无法处理与用户的交互。只有被绑定监听器的事件发生的时候，回调函数才会添加到消息队列。</p><p>还有一个典型的例子就是 setTimeout 这个 Web API，虽然函数有一个参数是设置计时器时间，但是因为事件循环机制的存在，实际执行的情况是。运行时在等待设置的延迟时间后，把回调函数添加到消息队列中。因为队列的先进先出的特性，如果此时队列中没有其它消息并且执行栈为空，设置的回调函数会被马上添加到执行栈中去处理。但是，如果有其它消息，setTimeout 的回调函数必须等待其它消息处理完后才能执行。因此第二个参数仅仅表示了最少延迟时间，而非确切的等待时间，等待的时间取决于队列里待处理的消息数量。</p><p>针对这些问题，还有 Promise、async/await，会在之后的文档中进行更进一步的解释。</p><h2 id="参考链接">参考链接</h2><ol><li><p><a href="https://www.zhihu.com/question/20607178/answer/2133648600">运行时（runtime）是什么意思？应该怎样深入且直观地理解？ - doodlewind 的回答 - 知乎</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop">并发模型与事件循环</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing">异步 JavaScript 简介</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Asynchronous">异步</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Synchronous">同步</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web Storage</title>
    <link href="/2022/08/11/Web-Storage/"/>
    <url>/2022/08/11/Web-Storage/</url>
    
    <content type="html"><![CDATA[<h2 id="两种-Web-Storage">两种 Web Storage</h2><p>Web Storage 有两种，分别是 sessionStorage 和 localStorage，区别主要在于两者的可用范围。</p><p>时间上，sessionStorage 在页面会话期间（浏览器处于打开的情况，页面重新加载或者恢复）可用，关闭浏览器就会清理。页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。而 localStorage 在浏览器关闭，再重新打开数据仍然存在。</p><p>空间上，sessionStorage 只在当前页面会话中存在，并不能跨标签；而 localStorage 只要在同一域名下，是跨浏览器窗口的。</p><h2 id="详细解释">详细解释</h2><p>主要解释关于页面会话的问题，localStorage 并不需要更多的解释。</p><p>属于同一个页面会话：</p><ol><li><p>重新加载：刷新页面。</p></li><li><p>恢复页面：恢复关闭的页面（如，chrome 的重新打开关闭的标签页功能），即便关闭这个页面后又打开了新的页面，只要是恢复这个行为，就还是上一个页面会话。</p></li></ol><p>不属于同一个页面会话的情况：</p><ol><li><p>新的页面也就有新的页面会话：复制链接重新打开等行为并不算同一个页面会话，即“打开多个相同的 URL 的 Tabs 页面，会创建各自的 sessionStorage”。</p></li><li><p>关闭浏览器才清理：关闭对应浏览器标签或窗口，会清除对应的 sessionStorage。</p></li></ol><p>注意，存储在 sessionStorage 或 localStorage 中的数据特定于页面的协议。也就是说 <a href="http://example.com">http://example.com</a> 与 <a href="https://example.com">https://example.com</a> 的 sessionStorage 和 localStorage 相互隔离。各浏览器支持的 localStorage 和 sessionStorage 容量上限不同。</p><h2 id="参考资料">参考资料</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API">Web Storage API</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage">Window.sessionStorage</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage">Window.localStorage</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Front-end</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么我的 commit 记录上总是一堆分支合并 -- Git 分支小知识</title>
    <link href="/2022/07/21/merge-branches/"/>
    <url>/2022/07/21/merge-branches/</url>
    
    <content type="html"><![CDATA[<h2 id="起源">起源</h2><p>想写这篇博客的主要原因是，先前在工作中遇到了一些 git 的分支问题和冲突问题，所以想总结一下。</p><p>当时是发生了这样一件事情。在和同事的项目合作中，当时不同的模块分别放在不同的文件夹中，没有编辑同一个文件的情况，但是却在我上传代码时，发生了冲突，这就非常匪夷所思了。为了解决这个问题，我查看了 commit 记录，却发现 commit 记录被大量的 Merge branch 所污染，而且因为使用习惯不够健康，也导致 commit 记录过长，难以追踪到问题的源头。</p><p>因为这次事故，使我产生了问题，为什么我的 commit 记录上总是一堆分支合并？同样，为什么会有这次事故的出现？</p><h2 id="反思">反思</h2><p>先来看看自己的 git 使用坏习惯吧：</p><ul><li>项目几乎不建立分支</li><li>当先前提交的 commit 内容有问题时，直接再叠一个修复问题的 commit</li><li>很少，或者几乎不打 tag</li><li>使用 Git 依赖 ide 提供的交互式功能，几乎不使用 git 命令</li><li>对于由于其他人的误操作导致的冲突，采用直接覆盖文件的方式去解决冲突</li></ul><p>很难相信，这些习惯是看过 <a href="https://git-scm.com/book/zh/v2">Pro Git</a> 这本书的人做出来的操作。同样，也是在实际使用中遇到了问题，才意识到 Git 很多功能的作用和使用时一些约定俗成的规则是为了避免和解决那些问题。</p><h2 id="分析问题">分析问题</h2><p>首先对上面那些坏习惯会带来什么问题，以及这些问题和起源里讲的故事有什么关系进行分析。</p><p>这些问题将会导致项目的 commit 记录中有大量的信息，同时也会导致难以定位、查找错误的位置。先回到之前工作的时候发现的问题上，这个事故的产生，和上面提到的这些坏习惯是有直接关联的。</p><p>当时事情是这样发生的，另一名同事的电脑出现了一些问题，所以他把自己开发到一半的代码给拷贝了出来。看到这名同事发生的意外，一同开发这个项目的我们都纷纷同步了代码，将目前的开发进度进行了上传，当然，都在同一个分支内。这名电脑出现故障的同事借用了另一台电脑开发结束后，用另外一位同事的 Git 用户信息，clone 了项目后，利用 vsc 的源代码管理工具进行了同步。</p><p>到这一步就会发现，他复制的代码相较于远程分支是较为落后的，在 commit 中影响了其他人的文件，这自然会在同步的时候发生冲突。因为他使用的是 vsc 的源代码管理工具，所以看到了下面的内容：</p><img src="/2022/07/21/merge-branches/vsc-merge-conflict.png" class="" title="vsc 合并冲突的右键选项"><p>在这里，当前内容指的是本地的改动，而传入版本是远程的改动，这一操作导致了最后问题的产生。</p><hr><p>故事讲完了，我来说说这个问题的查找过程中发现的一些内容吧。</p><p>首先是借用其他人的 Git 用户信息这个，使得我在查看 commit 日志中遇到了很大的困难，一开始以为是不是谁配置的工作流导致的问题。同时，在查看记录时，发现了类似下面的情况：</p><img src="/2022/07/21/merge-branches/commit-merge-branch.jpg" class="" title="commit 触发的分支合并"><p>即，我明明只是利用 vsc 的分支管理工具，执行了 git pull 和 git push 命令，为什么导致在没有编辑同一文件内容的情况下产生了分支合并。根据 Pro Git 上的<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF#%E6%8B%89%E5%8F%96:~:text=%E7%84%B6%E8%80%8C%EF%BC%8C%E6%9C%89%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E5%8F%AB%E4%BD%9C%20git%20pull%20%E5%9C%A8%E5%A4%A7%E5%A4%9A%E6%95%B0%E6%83%85%E5%86%B5%E4%B8%8B%E5%AE%83%E7%9A%84%E5%90%AB%E4%B9%89%E6%98%AF%E4%B8%80%E4%B8%AA%20git%20fetch%20%E7%B4%A7%E6%8E%A5%E7%9D%80%E4%B8%80%E4%B8%AA%20git%20merge%20%E5%91%BD%E4%BB%A4">描述</a>， git pull 相当于 git fetch 和 git merge 的组合，也正因为这个特点，导致了大量 merge 行为的产生。同时，功能的开发的提交在主分支上，不建立分支，也不和主分支保持同步也是导致这次事故产生的原因。相比较而言，vsc 的分支管理工具的略含误导的描述，反而显得并不那么重要了。</p><p>那么，“正确”的处理方式应该是什么样子的呢？有哪些比较优秀的解决方案呢？</p><h2 id="改变使用-Git-的坏习惯">改变使用 Git 的坏习惯</h2><p>首先要注意的是，使用 Git 一定要勤用分支，因为 Git 的每次提交都是基于快照，而分支是指向某个快照的指针，所以使用分支在 Git 上的开销非常小，但是收益很明显。利用分支，将每次新功能的添加放在和主分支独立的地方，使得其他开发者每次都可以从一个完整的环境开始。<code>git checkout -b branch_name</code> 命令可以让你从当前位置新建一个分支。</p><p>当你在分支上开发结束之后，不要急于合并到主分支，而是要先查看祖先分支的变化。举两个例子来描述问题。</p><p>当你在本地分支开发新功能的时候，由于主分支上存在的 bug 你改变了主分支的状态。可以先在要被合并的分支上使用 <code>git rebase main_branch</code> 来将你和主分支上的差异消除，这样当你在本地合并分支的时候，就可以利用分支合并的快速模式来合并分支。这样的好处是只会有分支指针的前进，而不会产生新的提交，当你在本地合并完成后，再提交到远程分支就可以了。</p><p>对于远程分支的情况也是类似的操作。当你执行 <code>git pull</code> 命令的时候，由于你本地的主分支显然落后于远程分支，你就可以很方便的从远程分支上获取到最新的变动，然后你再将本地开发的新内容合并到主分支后提交，这样就可以大大减轻产生冲突的风险。</p><p>当然，对于多人在同一个分支开发的情况，我比较建议使用 <code>git pull --rebase</code> 这个命令来获取其他开发者的更新内容。因为如果是默认的 <code>git pull</code> 将会造成分支的合并，而根据<a href="https://github.com/Storh/git-example/tree/main/test/3">测试</a>的情况，会产生一个 merge 的提交，使得生成了一个所有和远程分支有不同内容的你的内容的快照。大量的 merge 信息会影响对项目提交历史的追踪。</p><p>当然，这些只是由于我先前的经历导致的对 Git 的一些操作感受，如果说能够很好的做好分支和合并操作，同时每个 Git 的使用者也能去避免不必要的冲突的产生和妥善处理冲突的产生。那么直接使用 <code>git pull</code> 所产生的合并快照也可以很形象的告诉开发者，每次新开发的功能的合并位置。</p><p>也推荐看一下我后续写的关于如何使用 Git 的博客和 Git 的测试项目。</p><h2 id="补充内容">补充内容</h2><p>今天看到了知乎上套路的一个问题，和这个博客也是蛮相关的，特此推荐看一下。</p><p><a href="https://www.zhihu.com/question/36509119">在开发过程中使用 git rebase 还是 git merge，优缺点分别是什么？</a></p><h2 id="参考内容">参考内容</h2><ul><li><a href="https://git-scm.com/book/zh/v2">Pro Git</a></li><li><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching 小游戏</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Git Branching</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello world</title>
    <link href="/2022/07/04/hello-world/"/>
    <url>/2022/07/04/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>博客采用 hexo 和 GitHub Pages 结合，配置自己的个人博客页面，发布一些自己总结学习的内容。<br>同时本文也兼顾写一些我在博客部署时遇到的一些问题。</p><h2 id="hexo-部署到-GitHub-Pages-的一些问题">hexo 部署到 GitHub Pages 的一些问题</h2><p>首先要表明的是，hexo 的文档还是比较详实的，参照如下链接操作即可。<br><a href="https://hexo.io/docs/github-pages">hexo 的官方部署教程</a><br>但是要提醒的是，主要要注意的是步骤二和步骤四。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span>  <span class="hljs-comment"># default branch</span><br></code></pre></td></tr></table></figure><p>在修改 workflows 的 pages.yml 文件中，除了文档中专门提到的 node 的版本问题，还要修改如上面代码中写的分支，如果分支没有写对的话，这个 workflows 是不会执行的。执行不成功也就不会自动生成 gh-pages 分支来用于部署。</p><p>同时，在提交代码之后，GitHub Pages 的部署工作流会运行，因为代码中含有文件名为下划线开头的文件（如：_config.yml）。这将会导致文件被识别为 jekyll 博客，GitHub 就会自动按照 jekyll 博客的方式去处理，导致构造和部署的工作流失败。</p><p>针对这个工作流失败的问题描述和内容可以参考这个 <a href="https://github.com/hexojs/hexo/issues/3212">issue</a>。解决方案同样可以参考这个issue中提到的<a href="https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/">连接</a>。</p><p>然而，这并不是解决这个问题的“正确”方法。之所以会出现没有按照预想的方式进行部署和文档中提到的步骤六有关，因为还没有正确的设置 GitHub Pages 的资源位置信息。同时，如果去观察自动生成的 gh-pages 分支内容时，里面也是有和上面同样的处理方式的（添加一个名为 .nojekyll 的文件）。</p><p>当修改成功后，你应该看到你的工作流大致如下图：</p><img src="/2022/07/04/hello-world/workflows.jpg" class="" title="工作流失败和成功的图片"><p>这时候就可以去访问 <a href="http://username.github.io">username.github.io</a> 就可以看到自己的博客了。</p><h2 id="hexo-的一些常用操作">hexo 的一些常用操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">本地启动</span><br>hexo server<br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个草稿</span><br>hexo new draft &quot;title&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">发布一个草稿</span><br>hexo publish &quot;title&quot;<br></code></pre></td></tr></table></figure><h2 id="使用中的一些补充">使用中的一些补充</h2><p>hexo 默认提供的 markdown 渲染器并不能提供所有的功能，比如上标功能就没有提供，所以我根据一个<a href="https://jovi.uxlib.net/add-superscript-subscript-footnote-and-other-functions-to-hexo.html/">链接</a>中的内容进行了更改，现在可以支持上标功能了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
